buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: "jacoco"
apply plugin: 'com.google.gms.google-services'
apply from: '../config_quality/quality.gradle'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    signingConfigs {
        config {
            keyAlias 'MyAndroidKey'
            keyPassword 'keyaliaspass0'
            storeFile rootProject.file('android.jks')
            storePassword 'keystorepass0'
        }
    }
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.taleckij_anton.taleckijapp"
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 7
        versionName "5.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [HOCKEYAPP_APP_ID: "701ffe36001345eb94bb5b56aea3211a"]
        multiDexEnabled true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    dexOptions {
        javaMaxHeapSize "6g"
        jumboMode = true
        //incremental true
        preDexLibraries = false
    }
}

jacoco {
    toolVersion = "0.8.0"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
    testImplementation 'org.robolectric:robolectric:3.7'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }
    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support:cardview-v7:27.0.2'
    implementation 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support:preference-v7:27.0.2'
    implementation 'com.yandex.android:mobmetricalib:2.80'

    implementation 'com.google.firebase:firebase-core:11.4.2'
    implementation "com.yandex.android:mobmetricapushlib:1.0.0"
    implementation "com.google.firebase:firebase-messaging:11.4.2"
    implementation "com.google.android.gms:play-services-base:11.4.2"
    implementation "com.android.support:support-compat:27.0.2"
}

afterEvaluate {
    testDebugUnitTest.jacoco.includeNoLocationClasses = true
    task runTestsWithCoverage(type: JacocoReport) {
        dependsOn(testDebugUnitTest, connectedDebugAndroidTest)
        executionData(fileTree(dir: buildDir, includes: ['**/*.exec' , '**/*.ec']))
        setSourceDirectories(files(new File(projectDir, 'src/main/java')))
        setClassDirectories(fileTree(dir: new File(buildDir, 'intermediates/classes/debug'), exclude: [
                '**/R.class', '**/R$*.class', '**/BuildConfig.*', 'android/**/*.*'
        ]))
    }
}

